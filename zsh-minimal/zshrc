export ZDOTDIR=$HOME
export LANG="en_US.UTF-8"
export EDITOR=vim
export CLICOLOR=1
export LSCOLORS=exfxbxdxexegedabagacad
export HISTFILE=~/.histfile
export HISTSIZE=10000
export SAVEHIST=1000
export WORDCHARS=''
export ENHANCD_DISABLE_DOT=1
export RIPGREP_CONFIG_PATH=~/.ripgrep
export BAT_CONFIG_PATH=~/.bat
export FZF_DEFAULT_COMMAND="rg --files"
export FZF_CTRL_T_COMMAND="rg --files"
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'

HOMEBREW_BINARIES=/usr/local/bin
CARGO_BINARIES=$HOME/.cargo/bin
PERSONAL_BINARIES=$HOME/bin

# Local binaries
export PATH=$PATH:$HOMEBREW_BINARIES:$CARGO_BINARIES:$PERSONAL_BINARIES

fpath=(/usr/local/share/zsh-completions $fpath)

autoload -Uz compinit && compinit -u
autoload -Uz colors  && colors
autoload -Uz vcs_info

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:*:*:*' menu select

source "$HOME/.dotfiles/zsh-minimal/plugins-static.sh"
source "$HOME/.dotfiles/zsh-minimal/theme.zsh"
source "$HOME/.dotfiles/zsh-minimal/options.zsh"

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && [ -s "$BASE16_SHELL/profile_helper.sh" ] && eval "$("$BASE16_SHELL/profile_helper.sh")"

bindkey -e
bindkey "[3~" delete-char
bindkey "^[[3~" delete-char
bindkey "^[3;5~" delete-char
bindkey "\e[3~" delete-char

# [Backspace] - delete backward
bindkey '^?' backward-delete-char
bindkey '^w' backward-kill-word

# [Ctrl-RightArrow] - move forward one word
bindkey '^[[1;5C' forward-word

# [Ctrl-LeftArrow] - move backward one word
bindkey '^[[1;5D' backward-word

zstyle :compinstall filename "$HOME/.zshrc"

alias vim="nvim"
alias vi="nvim"
alias ls="exa -l"
alias bex="bundle exec"

# Node env
eval "$(nodenv init -)"

# Ruby
eval "$(rbenv init -)"

# Go
eval "$(direnv hook zsh)"

# Erlang 
. $HOME/.kerl/21.2/activate

# Kiex
[ -f ~/.kiex/scripts/kiex ] && source "$HOME/.kiex/scripts/kiex"




[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

rg() {
  if [ -t 1 ]; then
    command rg -p "$@" | less -RFX
  else
    command rg "$@"
  fi
}

c() {
  IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    builtin cd -q $(command git root)
  fi
}

title() {
    echo -ne "\033]0;"$*"\007"
}

adjust_title_to_iterm() {
 IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    PATH_IN_GIT=$(command git root)
    title $(basename $PATH_IN_GIT)
  else
    title $(basename $PWD)
  fi

}

chpwd_functions+=adjust_title_to_iterm

adjust_title_to_iterm

