source "$HOME/.dotfiles/zsh-minimal/options.zsh"

export BAT_CONFIG_PATH=~/.bat
export CLICOLOR=1
export EDITOR=vim
export ENHANCD_DISABLE_DOT=1
export FZF_CTRL_T_COMMAND="rg --files"
export FZF_DEFAULT_COMMAND="rg --files"
export HISTFILE=~/.histfile
export HISTSIZE=10000
export LANG="en_US.UTF-8"
export RIPGREP_CONFIG_PATH=~/.ripgrep
export SAVEHIST=1000
export WORDCHARS=''
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'

source "$HOME/.dotfiles/zsh-minimal/zplug.zsh"

GO_BINARIES=$HOME/go/bin
CARGO_BINARIES=$HOME/.cargo/bin
PERSONAL_BINARIES=$HOME/bin
EXTRAS="/usr/local/bin/aws_completer"
HOMEBREW="/opt/homebrew/bin"

# Local binaries
export PATH=$HOMEBREW:$CARGO_BINARIES:$PERSONAL_BINARIES:$GO_BINARIES:$EXTRAS:$PATH

if [[ "$(uname)" == "Darwin" ]]; then
  # Install homebrew!
  eval "$(brew shellenv)"
fi

fpath=(/usr/local/share/zsh-completions $fpath)

autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit -u
autoload -Uz colors  && colors

# Add the AWS completions
complete -C aws_completer aws

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:*:*:*' menu select

zstyle :compinstall filename "$HOME/.zshrc"

# Themeing with starship
eval "$(starship init zsh)"

bindkey -e
bindkey "^[[1;5C" forward-word  # CTRL right_arrow to move a word forward
bindkey "^[[1;5D" backward-word # CTRL left_arrow to move a word backward
bindkey '\e[3~'   delete-char

alias vim="nvim"
alias vi="nvim"
alias ls="exa -l"
alias typora="open -a typora"

# Direnv hooking
eval "$(direnv hook zsh)"

# Setup kubectl completions
eval "$(kubectl completion zsh)"
[ -f ~/.config/minikube/completion.zsh ] && source ~/.config/minikube/completion.zsh

# Fast-Node-Manager
eval "$(fnm env)"
[ -f ~/.config/fnm/completion.bash ] && source ~/.config/fnm/completion.bash

# Fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


rg() {
  if [ -t 1 ]; then
    command rg -p "$@" | less -RFX
  else
    command rg "$@"
  fi
}

c() {
  IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    builtin cd -q $(command git root)
  fi
}

set_title() {
    local title=$*
    if [ -n "${PREFERRED_TITLE}" ]; then
      title=$PREFERRED_TITLE
    fi

    if [ -z "$TMUX" ]; then
      echo -ne "\033]0;"$title"\007"
    else
      tmux rename-window $title
    fi
}

title() {
 IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    PATH_IN_GIT=$(command git root)
    set_title $(basename $PATH_IN_GIT)
  else
    set_title $(basename $PWD)
  fi
}

chpwd_functions+=title

title

font_size() {
  sd 'size: [\d\.]+' "size: $1" ~/.config/alacritty/alacritty.yml
}

presentation_mode() {
  font_size 24
}

normal_mode() {
  font_size 16
}

laptop_mode() {
  font_size 14
}

dots() {
  cd ~/.dotfiles
}

watchy() {
  watchexec --clear -- "if $@; then noti -m ✅; else noti -m ❌; fi"
}

unaws() {
  unset AWS_ACCESS_KEY_ID AWS_ACCOUNT_ID AWS_DEFAULT_REGION AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
}

if [[ -f "$HOME/.custom-client-functions" ]]; then
  source "$HOME/.custom-client-functions";
fi
