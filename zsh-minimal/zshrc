# Suggestion from Eirik:
#
# move some stuff out into zshenv for sourcing evars,
# keep this here so that running sub-shells do not get all my fancy goo
# #!/bin/zsh
# If not running interactively, don't do anything
#[[ $- == *i* ]] || return 0

source "$HOME/.dotfiles/zsh-minimal/options.zsh"

export BAT_CONFIG_PATH=~/.bat
export CLICOLOR=1
export EDITOR=/opt/homebrew/bin/nvim
export ENHANCD_DISABLE_DOT=1
export FZF_CTRL_T_COMMAND="rg --files"
export FZF_DEFAULT_COMMAND="rg --files"
export HISTFILE=~/.histfile
export HISTSIZE=10000
export LANG="en_US.UTF-8"
export SAVEHIST=1000
export WORDCHARS=''
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc
export LG_CONFIG_FILE=$HOME/.lazygit.yaml

if [[ -d ~/.kube/ ]]; then
  export KUBECONFIG=~/.kube/config:$(find ~/.kube -type f -name '*.yaml' | tr '\n' ':')
fi


mkdir -p ~/.tmux/plugins

if [[ ! -d ~/.tmux/plugins/tpm ]]; then
  echo "Installing tpm..."
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

source "$HOME/.dotfiles/zsh-minimal/zplug.zsh"

GO_BINARIES=$HOME/go/bin
CARGO_BINARIES=$HOME/.cargo/bin
PERSONAL_BINARIES=$HOME/bin
PIPX_BINARIES=$HOME/.local/bin
EXTRAS="/usr/local/bin/aws_completer"
HOMEBREW="/opt/homebrew/bin"

# Local binaries
export PATH=$HOMEBREW:$CARGO_BINARIES:$PERSONAL_BINARIES:$PIPX_BINARIES:$GO_BINARIES:$EXTRAS:$PATH

if [[ "$(uname)" == "Darwin" ]]; then
  # Install homebrew!
  eval "$(brew shellenv)"
fi

fpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)

autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit -u
autoload -Uz colors  && colors

# Add the AWS completions
complete -C aws_completer aws

zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:*:*:*' menu select

zstyle :compinstall filename "$HOME/.zshrc"

# Fix comment highlighting
export ZSH_HIGHLIGHT_STYLES[comment]='fg=yellow,bold'

# Themeing with starship
eval "$(starship init zsh)"

bindkey -e
bindkey "^[[1;2C" forward-word  # ctrl + right_arrow to move a word forwards
bindkey "^[[1;2D" backward-word # ctrl + left_arrow to move a word backwards
bindkey "\e[3~" delete-char

alias vim="nvim"
alias vi="nvim"
alias ls="exa -l --icons"
alias typora="open -a typora"
alias next="cargo nextest run"
alias todo="zellij run --close-on-exit --floating -- nvim ~/Development/todo.xit"

# Direnv hooking
eval "$(direnv hook zsh)"

# Setup kubectl completions
eval "$(kubectl completion zsh)"
[ -f ~/.config/minikube/completion.zsh ] && source ~/.config/minikube/completion.zsh

# Setup k3d completion
[ -f ~/.config/k3d/completion.zsh ] && source ~/.config/k3d/completion.zsh

# Fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Fast node manager
if command -v fnm &> /dev/null; then
  eval $(fnm env)
fi

if command -v gpg &> /dev/null; then
  export GPG_TTY=$(tty)
fi

c() {
  IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    builtin cd -q $(command git root)
  fi
}

set_title() {
    local title=$*
    if [ -n "${PREFERRED_TITLE}" ]; then
      title=$PREFERRED_TITLE
    fi

    if [[ -v TMUX ]]; then
      tmux rename-window "$title"
    elif [[ "${ZELLIJ}" = "0" ]]; then
      zellij action rename-tab "$title"
    else
      echo -ne "\033]0;"$title"\007"
    fi
}

title() {
 IN_REPO=$(command git rev-parse --is-inside-work-tree 2&> /dev/null)
  if [ "$IN_REPO" = "true" ]; then
    PATH_IN_GIT=$(command git root)
    set_title $(basename $PATH_IN_GIT)
  else
    set_title $(basename $PWD)
  fi
}

chpwd_functions+=title
title

font_size() {
  if [[ "$1" == "" ]]; then
    yq '.font.size' $HOME/.alacritty-font-size.yml
    exit
  fi

  if [[ "$(yq --version)" =~ "mikefarah" ]]; then
    # go impl of yq
    OPTS="-i"
  else
    # python impl of yq
    OPTS="-yi"
  fi
  yq $OPTS ".font.size = $1" $HOME/.alacritty-font-size.yml
}

presentation_mode() {
  font_size 32
}

normal_mode() {
  font_size 24
}

laptop_mode() {
  font_size 16
}

dots() {
  cd ~/.dotfiles
}

dark() {
  $HOME/.dotfiles/bin/theme.sh dark
}

light() {
  $HOME/.dotfiles/bin/theme.sh light
}

watchy() {
  watchexec --clear -- "if $@; then noti -m ✅; else noti -m ❌; fi"
}

unaws() {
  unset AWS_ACCESS_KEY_ID AWS_ACCOUNT_ID AWS_DEFAULT_REGION AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
}

unkube() {
  echo unset KUBECONFIG
}

if [[ -f "$HOME/.custom-client-functions" ]]; then
  source "$HOME/.custom-client-functions";
fi

export ATUIN_STYLE=compact
export ATUIN_SEARCH_MODE=fuzzy
if command -v atuin &> /dev/null; then
  eval "$(atuin init zsh)"
fi
